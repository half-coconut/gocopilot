// Code generated by MockGen. DO NOT EDIT.
// Source: note.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "TestCopilot/TestEngine/internal/domain"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockNoteService is a mock of NoteService interface.
type MockNoteService struct {
	ctrl     *gomock.Controller
	recorder *MockNoteServiceMockRecorder
}

// MockNoteServiceMockRecorder is the mock recorder for MockNoteService.
type MockNoteServiceMockRecorder struct {
	mock *MockNoteService
}

// NewMockNoteService creates a new mock instance.
func NewMockNoteService(ctrl *gomock.Controller) *MockNoteService {
	mock := &MockNoteService{ctrl: ctrl}
	mock.recorder = &MockNoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteService) EXPECT() *MockNoteServiceMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockNoteService) GetById(ctx context.Context, id int64) (domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockNoteServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockNoteService)(nil).GetById), ctx, id)
}

// GetPublishedById mocks base method.
func (m *MockNoteService) GetPublishedById(ctx context.Context, id, uid int64) (domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedById", ctx, id, uid)
	ret0, _ := ret[0].(domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedById indicates an expected call of GetPublishedById.
func (mr *MockNoteServiceMockRecorder) GetPublishedById(ctx, id, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedById", reflect.TypeOf((*MockNoteService)(nil).GetPublishedById), ctx, id, uid)
}

// List mocks base method.
func (m *MockNoteService) List(ctx context.Context, id int64, offset, limit int) ([]domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, id, offset, limit)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNoteServiceMockRecorder) List(ctx, id, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNoteService)(nil).List), ctx, id, offset, limit)
}

// ListPub mocks base method.
func (m *MockNoteService) ListPub(ctx context.Context, start time.Time, offset, limit int) ([]domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPub", ctx, start, offset, limit)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPub indicates an expected call of ListPub.
func (mr *MockNoteServiceMockRecorder) ListPub(ctx, start, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPub", reflect.TypeOf((*MockNoteService)(nil).ListPub), ctx, start, offset, limit)
}

// Publish mocks base method.
func (m *MockNoteService) Publish(ctx context.Context, note domain.Note) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, note)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockNoteServiceMockRecorder) Publish(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNoteService)(nil).Publish), ctx, note)
}

// Save mocks base method.
func (m *MockNoteService) Save(ctx context.Context, note domain.Note) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, note)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockNoteServiceMockRecorder) Save(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNoteService)(nil).Save), ctx, note)
}

// Withdraw mocks base method.
func (m *MockNoteService) Withdraw(ctx context.Context, note domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockNoteServiceMockRecorder) Withdraw(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockNoteService)(nil).Withdraw), ctx, note)
}
