// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"egg_yolk/internal/repository"
	"egg_yolk/internal/repository/cache"
	"egg_yolk/internal/repository/dao"
	"egg_yolk/internal/repository/dao/note"
	note2 "egg_yolk/internal/repository/note"
	"egg_yolk/internal/service"
	"egg_yolk/internal/web"
	"egg_yolk/ioc"
	"github.com/gin-gonic/gin"
)

import (
	_ "go.uber.org/zap"
	_ "gorm.io/driver/mysql"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := ioc.InitRedis()
	loggerV1 := ioc.InitLogger()
	v := ioc.InitMiddleware(cmdable, loggerV1)
	db := ioc.InitDB(loggerV1)
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, loggerV1)
	userHandler := web.NewUserHandler(userService, loggerV1)
	apidao := dao.NewAPIDAO(loggerV1, db)
	apiRepository := repository.NewAPIRepository(apidao, loggerV1)
	apiService := service.NewAPIService(apiRepository, loggerV1)
	apiHandler := web.NewAPIHandler(apiService, loggerV1)
	noteDAO := note.NewNoteDAO(loggerV1, db)
	authorDAO := note.NewNoteAuthorDAO(loggerV1, db)
	readerDAO := note.NewNoteReaderDAO(loggerV1, db)
	noteRepository := note2.NewNoteRepository(noteDAO, authorDAO, readerDAO, loggerV1)
	noteService := service.NewNoteService(noteRepository, loggerV1)
	noteHandler := web.NewNoteHandler(noteService, loggerV1)
	engine := ioc.InitWebServer(v, userHandler, apiHandler, noteHandler)
	return engine
}
