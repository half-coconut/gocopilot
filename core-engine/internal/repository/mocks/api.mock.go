// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/half-coconut/gocopilot/core-engine/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIRepository is a mock of APIRepository interface.
type MockAPIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIRepositoryMockRecorder
}

// MockAPIRepositoryMockRecorder is the mock recorder for MockAPIRepository.
type MockAPIRepositoryMockRecorder struct {
	mock *MockAPIRepository
}

// NewMockAPIRepository creates a new mock instance.
func NewMockAPIRepository(ctrl *gomock.Controller) *MockAPIRepository {
	mock := &MockAPIRepository{ctrl: ctrl}
	mock.recorder = &MockAPIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIRepository) EXPECT() *MockAPIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAPIRepository) Create(ctx context.Context, api domain.API) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, api)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAPIRepositoryMockRecorder) Create(ctx, api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPIRepository)(nil).Create), ctx, api)
}

// FindByAId mocks base method.
func (m *MockAPIRepository) FindByAId(ctx context.Context, aid int64) (domain.API, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAId", ctx, aid)
	ret0, _ := ret[0].(domain.API)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAId indicates an expected call of FindByAId.
func (mr *MockAPIRepositoryMockRecorder) FindByAId(ctx, aid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAId", reflect.TypeOf((*MockAPIRepository)(nil).FindByAId), ctx, aid)
}

// FindByUId mocks base method.
func (m *MockAPIRepository) FindByUId(ctx context.Context, uid int64) ([]domain.API, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUId", ctx, uid)
	ret0, _ := ret[0].([]domain.API)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUId indicates an expected call of FindByUId.
func (mr *MockAPIRepositoryMockRecorder) FindByUId(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUId", reflect.TypeOf((*MockAPIRepository)(nil).FindByUId), ctx, uid)
}

// Update mocks base method.
func (m *MockAPIRepository) Update(ctx context.Context, api domain.API) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, api)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAPIRepositoryMockRecorder) Update(ctx, api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAPIRepository)(nil).Update), ctx, api)
}
