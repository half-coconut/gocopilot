// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	repository2 "github.com/half-coconut/gocopilot/core-engine/interactive/repository"
	cache2 "github.com/half-coconut/gocopilot/core-engine/interactive/repository/cache"
	dao2 "github.com/half-coconut/gocopilot/core-engine/interactive/repository/dao"
	service2 "github.com/half-coconut/gocopilot/core-engine/interactive/service"
	note3 "github.com/half-coconut/gocopilot/core-engine/internal/events/note"
	"github.com/half-coconut/gocopilot/core-engine/internal/repository"
	"github.com/half-coconut/gocopilot/core-engine/internal/repository/cache"
	"github.com/half-coconut/gocopilot/core-engine/internal/repository/dao"
	"github.com/half-coconut/gocopilot/core-engine/internal/repository/dao/note"
	note2 "github.com/half-coconut/gocopilot/core-engine/internal/repository/note"
	"github.com/half-coconut/gocopilot/core-engine/internal/service"
	"github.com/half-coconut/gocopilot/core-engine/internal/service/core"
	"github.com/half-coconut/gocopilot/core-engine/internal/service/openai"
	"github.com/half-coconut/gocopilot/core-engine/internal/web"
	"github.com/half-coconut/gocopilot/core-engine/internal/web/jwt"
	"github.com/half-coconut/gocopilot/core-engine/ioc"
)

import (
	_ "github.com/spf13/viper/remote"
	_ "go.uber.org/zap"
	_ "gorm.io/driver/mysql"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	loggerV1 := ioc.InitLogger()
	handler := jwt.NewRedisJWTHandler(cmdable)
	v := ioc.InitMiddleware(cmdable, loggerV1, handler)
	httpService := core.NewHttpService(loggerV1)
	deepSeekService := openai.NewDeepSeekService(loggerV1, httpService)
	aiHandler := web.NewAIHandler(loggerV1, deepSeekService)
	db := ioc.InitDB(loggerV1)
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache, loggerV1)
	userService := service.NewUserService(userRepository, loggerV1)
	userHandler := web.NewUserHandler(userService, loggerV1, handler)
	apidao := dao.NewAPIDAO(loggerV1, db)
	apiRepository := repository.NewAPIRepository(apidao, loggerV1, userRepository)
	apiService := service.NewAPIService(apiRepository, loggerV1)
	taskDAO := dao.NewGORMTaskDAO(db, loggerV1)
	taskRepository := repository.NewCacheTaskRepository(taskDAO, loggerV1, userRepository, apiRepository)
	taskService := core.NewTaskService(taskRepository, loggerV1, httpService)
	apiHandler := web.NewAPIHandler(apiService, taskService, userService, loggerV1)
	taskHandler := web.NewTaskHandler(loggerV1, taskService)
	noteDAO := note.NewNoteDAO(loggerV1, db)
	authorDAO := note.NewNoteAuthorDAO(loggerV1, db)
	readerDAO := note.NewNoteReaderDAO(loggerV1, db)
	noteCache := cache.NewRedisNoteCache(cmdable)
	noteRepository := note2.NewNoteRepository(noteDAO, userRepository, authorDAO, readerDAO, noteCache, loggerV1)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := note3.NewKafkaProducer(syncProducer)
	noteService := service.NewNoteService(noteRepository, loggerV1, producer)
	clientv3Client := ioc.InitEtcd()
	interactiveServiceClient := ioc.InitIntrGRPCClientV1(clientv3Client)
	noteHandler := web.NewNoteHandler(noteService, loggerV1, interactiveServiceClient)
	cronJobDAO := dao.NewGORMCronJobDAO(db, loggerV1)
	cronJobRepository := repository.NewCacheCronJobRepository(cronJobDAO, loggerV1, userRepository)
	cronJobService := service.NewCronJobServiceImpl(loggerV1, cronJobRepository, taskService)
	cronJobHandler := web.NewCronJobHandler(loggerV1, cronJobService, taskService)
	engine := ioc.InitWebServer(v, aiHandler, userHandler, apiHandler, taskHandler, noteHandler, cronJobHandler)
	v2 := ioc.NewConsumers()
	rankingLocalCache := cache.NewRankingLocalCache()
	rankingRedisCache := cache.NewRankingRedisCache(cmdable)
	rankingRepository := repository.NewCacheRankingRepository(rankingLocalCache, rankingRedisCache)
	rankingService := service.NewBatchRankingService(noteService, interactiveServiceClient, rankingRepository)
	rlockClient := ioc.InitRLockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient, loggerV1)
	cron := ioc.InitJobs(loggerV1, rankingJob)
	app := &App{
		server:    engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var interactiveSvcProvider = wire.NewSet(service2.NewInteractiveService, repository2.NewCachedInteractiveRepository, dao2.NewGORMInteractiveDAO, cache2.NewRedisInteractiveCache)

var rankingServiceSet = wire.NewSet(repository.NewCacheRankingRepository, cache.NewRankingLocalCache, cache.NewRankingRedisCache, service.NewBatchRankingService)
